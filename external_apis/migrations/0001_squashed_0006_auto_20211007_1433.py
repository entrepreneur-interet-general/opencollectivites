# Generated by Django 3.2.7 on 2021-10-07 15:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("core", "0042_document_bnsp_query"),
    ]

    operations = [
        migrations.CreateModel(
            name="DataMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date de modification"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="nom")),
                ("mapping", models.JSONField(verbose_name="données")),
                (
                    "source_field",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="champ source",
                    ),
                ),
            ],
            options={
                "verbose_name": "Table de correspondance",
                "verbose_name_plural": "tables de correspondance",
            },
        ),
        migrations.CreateModel(
            name="OpenDataSoftEndpoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date de modification"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="nom")),
                ("url", models.URLField(verbose_name="url")),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.source",
                        verbose_name="source associée",
                    ),
                ),
            ],
            options={
                "verbose_name": "OpenDataSoft — point d’accès",
                "verbose_name_plural": "OpenDataSoft — points d’accès",
            },
        ),
        migrations.CreateModel(
            name="HistoricalDataMapping",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="date de modification"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="nom")),
                ("mapping", models.JSONField(verbose_name="données")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source_field",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="champ source",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Table de correspondance",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="OpenDataSoftQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date de création"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="date de modification"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, unique=True, verbose_name="nom"),
                ),
                ("query", models.CharField(max_length=1000, verbose_name="requête")),
                (
                    "last_polled",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="dernière tentative"
                    ),
                ),
                (
                    "last_success",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="dernière réussite"
                    ),
                ),
                (
                    "last_change",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="dernier changement"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="requête active"),
                ),
                (
                    "endpoint",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="external_apis.opendatasoftendpoint",
                        verbose_name="point d’accès",
                    ),
                ),
                (
                    "mapping",
                    models.ManyToManyField(
                        blank=True,
                        to="external_apis.DataMapping",
                        verbose_name="table de correspondance",
                    ),
                ),
                (
                    "identify_departements",
                    models.BooleanField(
                        null=True, verbose_name="Identifier les noms de départements"
                    ),
                ),
                (
                    "identify_metropoles",
                    models.BooleanField(
                        null=True, verbose_name="Identifier les noms de métropoles"
                    ),
                ),
                (
                    "identify_regions",
                    models.BooleanField(
                        null=True, verbose_name="Identifier les noms de régions"
                    ),
                ),
            ],
            options={
                "verbose_name": "OpenDataSoft — requête",
                "unique_together": {("query", "endpoint")},
            },
        ),
    ]
